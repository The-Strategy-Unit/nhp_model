"""Helper methods for the model package."""

import json

import numpy as np
import pandas as pd


def inrange(value: float, low: float = 0, high: float = 1) -> float:
    """Force a value to be in the interval [lo, hi].

    :param value: the value we want to contrain to the interval
    :type value: float
    :param low: the minimum that `value` can be
    :type low: float, optional
    :param high: the maximum that `value` can be
    :type high: float, optional

    :returns: `value` contrained to the interval
    :rtype: float
    """
    return max(low, min(high, value))


def rnorm(rng: np.random.Generator, low: float, high: float) -> float:
    """Create a single random normal value from a 80% confidence interval.

    :param rng: a random number generator
    :type rng: numpy.random.Generator
    :param low: the low estimate of our 80% confidence interval
    :type low: float
    :param high: the high estimate of our 80% confidence interval
    :type high: float

    :returns: a random normal value
    :rtype: float
    """
    q = 2.563103  # generated by: 2 * norm.ppf(1 - (1 - 0.8) / 2)
    mean = (high + low) / 2
    stdev = (high - low) / q
    return rng.normal(mean, stdev)


def age_groups(age: pd.Series) -> pd.Series:
    """Cut age into groups.

    Takes a pandas Series of age's and cut's into discrete intervals

    :param age: a Series of ages
    :type age: pandas.Series

    :returns: a Series of age groups
    :rtype: pandas.Series
    """
    return pd.cut(
        age.fillna(-1),
        [-1, 0, 1, 5, 10, 16, 18, 35, 50, 65, 75, 85, 1000],
        right=False,
        labels=[
            "Unknown",
            "0",
            "1-4",
            "5-9",
            "10-15",
            "16-17",
            "18-34",
            "35-49",
            "50-64",
            "65-74",
            "75-84",
            "85+",
        ],
    ).astype(str)


def load_params(filename: str) -> dict:
    """Load a params file.

    :param filename: the full name of the file that we wish to load
    :type filename: str

    :returns: the model parameters
    :rtype: dict
    """
    with open(filename, "r", encoding="UTF-8") as prf:
        return json.load(prf)
