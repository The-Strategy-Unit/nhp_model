on:
  workflow_call:
    inputs:
      docker-tag:
        required: true
        default: dev
        type: string
      app-version:
        required: true
        default: dev
        type: string
      data-version:
        required: true
        default: dev
        type: string  
      latest:
        required: false
        default: false
        type: boolean
    secrets:
      AZURE_CREDENTIALS:
        required: true
      REGISTRY_LOGIN_SERVER:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      NHP_STORAGE_ACCOUNT:
        required: true
      PAT_DELETE_PACKAGES:
        required: true

jobs:
  
  build-container:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' &&  github.event.action != 'closed'
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4
        
      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Build image"
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ghcr.io/the-strategy-unit/nhp_model:pr-${{ github.event.number }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            app_version=${{ inputs.app-version }}
            data_version=${{ inputs.data-version }}

  clean-up-untagged-images:
    needs: ["build-container"]
    uses: ./.github/workflows/remove_untagged_container_images.yaml
    secrets: inherit

  add-comment-to-pr:
    runs-on: ubuntu-latest
    needs: ["build-container"]
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: "## ✅ A new build is available"

      - name: Comment with container image link
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ✅ A new build is available.

            You can use the following to use pull the image into your local environment:

            ``` bash
            docker pull ghcr.io/the-strategy-unit/nhp_model:pr-${{ github.event.number }}
            ```
          edit-mode: replace

  deploy-ghcr:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Build image"
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ghcr.io/the-strategy-unit/nhp_model:${{ inputs.docker-tag }}
          push: true
          cache-from: type=gha
          build-args: |
            app_version=${{ inputs.app-version }}
            data_version=${{ inputs.data-version }}
      
      - name: 'Push latest'
        if: ${{ inputs.latest }}
        run: |
          docker tag ghcr.io/the-strategy-unit/nhp_model:${{ inputs.docker-tag }} ghcr.io/the-strategy-unit/nhp_model:latest
          docker push ghcr.io/the-strategy-unit/nhp_model:latest

  deploy-acr:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: 'Login via Azure CLI'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Build image"
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/nhp_model:${{ inputs.docker-tag }}
          push: true
          cache-from: type=gha
          build-args: |
            app_version=${{ inputs.app-version }}
            data_version=${{ inputs.data-version }}
            storage_account=${{ secrets.NHP_STORAGE_ACCOUNT }}
      - name: 'Push latest'
        if: ${{ inputs.latest }}
        run: |
          docker tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/nhp_model:${{ inputs.docker-tag }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/nhp_model:latest
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/nhp_model:latest

  remove-pr-image:
    runs-on: ubuntu-latest
    needs: ["deploy-ghcr", "deploy-acr"]
    steps:
      # you must create a classic PAT with `delete:packages` scope and add it as a secret named `PAT_DELETE_PACKAGES` 
      - name: Authenticate with PAT
        run: echo "${{ secrets.PAT_DELETE_PACKAGES }}" | gh auth login --with-token

      - name: "Remove pr image"
        env:
          TAG_TO_DELETE: "pr-${{ github.event.pull_request.number }}"
        run: |
          VERSION_ID=$(gh api /orgs/the-strategy-unit/packages/container/nhp_model/versions \
            -H "Accept: application/vnd.github+json" \
            --paginate | \
            jq -r '.[] | select(.metadata.container.tags[] == "$TAG_TO_DELETE") | .id')

          if [ -n "$VERSION_ID" ]; then
            echo "Deleting version ID: $VERSION_ID"
            gh api \
              -X DELETE \
              /orgs/the-strategy-unit/packages/container/nhp_model/versions/${VERSION_ID} \
              -H "Accept: application/vnd.github+json"
          else
            echo "Tag '$TAG_TO_DELETE' not found — skipping delete"
          fi